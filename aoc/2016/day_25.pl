#!/bin/perl -w
#
# https://adventofcode.com/2016/day/25
#

use strict;
use POSIX;

use lib '.';
use assembunny;

print "2016 Day 25\n\n";
my $puzzle = do { local $/; <DATA> }; # slurp it
my @instructions = split("\n", $puzzle);

my $reg = 'a';
my $start = 0;
my $cutoff = 1000;
my $val = $start;
while ($val++ < $cutoff) { 
	(my ($a, $b, $c, $d, $out)) = run_program(\@instructions, $reg, $val);
	last if ($out =~ /^(01)\1+$/);
}
if ($val < $cutoff) {
	print "Correct clock signal is generated by register $reg initialized to $val\n";
} else {
	print "Unable to find correct clock signal using initial values of (0, $cutoff]\n";
}

__DATA__
cpy a d
cpy 7 c
cpy 362 b
inc d
dec b
jnz b -2
dec c
jnz c -5
cpy d a
jnz 0 0
cpy a b
cpy 0 a
cpy 2 c
jnz b 2
jnz 1 6
dec b
dec c
jnz c -4
inc a
jnz 1 -7
cpy 2 b
jnz c 2
jnz 1 4
dec b
dec c
jnz 1 -4
jnz 0 0
out b
jnz a -19
jnz 1 -21